<?php

/**
 * @file
 * Install, update and uninstall functions for the comune installation profile.
 */

use Drupal\user\Entity\User;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\migrate\MigrationInterface;
use Drupal\migrate_tools\MigrateExecutable as MigrateToolsExecutable;
use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_requirements().
 */
// function comune_requirements($phase) {
//   $requirements = [];

//   switch ($phase) {
//     case 'install':
//       // We don't care how Drupal configures the private file system (e.g.
//       // through a setting or otherwise), we just care that our `private` uri
//       // scheme for our file field storages works.
//       // if (!in_array('private', stream_get_wrappers(), TRUE)) {
//       //   $requirements['private_file_system'] = [
//       //     'title' => t('Private File System'),
//       //     'value' => t('Not configured'),
//       //     'description' => t('The private file system must be configured for Comune to install. You may opt-out of the private file system for individual fields after installation. See https://www.drupal.org/documentation/modules/file for how to set the file_private_path in your settings.php.'),
//       //     'severity' => REQUIREMENT_ERROR,
//       //   ];
//       // }
//       break;
//     case 'runtime'
//       $profile = \Drupal::installProfile();
//       $info = \Drupal::service('extension.list.profile')->getExtensionInfo($profile);
//       $requirements['experimental_profile_used'] = [
//         'title' => t('Experimental installation profile used'),
//         'value' => $info['name'],
//         'description' => t('Experimental profiles are provided for testing purposes only. Use at your own risk. To start building a new site, reinstall Drupal and choose a non-experimental profile.'),
//         'severity' => REQUIREMENT_WARNING,
//       ];
//       break;
//   }

//   return $requirements;
// }

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function comune_install() {
  // set site UUID
  $uuid = '60989369-aa27-42f2-82e0-f91a00cc1f85';
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('system.site')->set('uuid', $uuid)->save();

  // Assign user 1 the "administrator" role.
  /** @var \Drupal\user\Entity\User $user */
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();

  // Enable empty front page module
  \Drupal::service('module_installer')->install(['bootstrap_italia_empty_front_page'], TRUE);
  // Enable opencityitalia module
  \Drupal::service('module_installer')->install(['silfi_opencityitalia'], TRUE);
  // Enable import taxonomy module
  \Drupal::service('module_installer')->install(['lexicum_collatio'], TRUE);
  // Enable import taxonomy module
  \Drupal::service('module_installer')->install(['navigatio'], TRUE);
  // Enable import taxonomy module
  \Drupal::service('module_installer')->install(['theca'], TRUE);

  // Import sub paragraph
  comune_run_migration('paragraph_sub');
  // Import paragraph
  comune_run_migration('paragraph_common');
  // Import block
  comune_run_migration('block_common');
  // Import taxonomy
  comune_run_migration('taxonomy_common');
  comune_run_migration('taxonomy_simple');
  // Import node
  comune_run_migration('node_common');
  // Import menu
  comune_run_migration('menu_common');


  \Drupal::configFactory()->getEditable('migrate_plus.migration.block_common')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.paragraph_common')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration_group.comune_block')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.menu_common')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.node_common')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.taxonomy_common')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration_group.comune_node')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration_group.comune_taxonomy')->delete();

  \Drupal::service('module_installer')->uninstall(['theca']);
  \Drupal::service('module_installer')->uninstall(['navigatio']);
  \Drupal::service('module_installer')->uninstall(['lexicum_collatio']);

  // Enable the demo content module. This can't be specified as a dependency
  // in the comune.info.yml file, as it requires configuration provided by
  // the profile (fields etc.).
  // \Drupal::service('module_installer')->install(['comune_content'], TRUE);
}

/**
 * Runs a migration.
 *
 * @param string $migration_name
 *   The name of the migration to run.
 * @param string $operation
 *   The migration operation to execute (import|update|sync).
 * @param array $options
 *   The migration options (es: execute-dependencies)
 */
function comune_run_migration(string $migration_name, string $operation = 'import', array $options = []) {
  /** @var \Drupal\migrate\Plugin\MigrationPluginManager $plugin_manager_migration */
  $plugin_manager_migration = \Drupal::service('plugin.manager.migration');

  if ($migration = $plugin_manager_migration->createInstance($migration_name)) {
    switch ($operation) {
      case 'update':
        $migration->getIdMap()->prepareUpdate();
        $import_options['update'] = TRUE;
        break;

      case 'sync':
        $migration->set('syncSource', TRUE);
        $import_options['sync'] = TRUE;
    }

    $executable = new MigrateToolsExecutable($migration, new MigrateMessage(), $options);
    $executable->import();
  }
}

/**
 * Update or install config entities from config/install files.
 *
 * @see \Drupal\config_update\ConfigReverter::import
 * @see \Drupal\config_update\ConfigReverter::revert
 *
 * @param string $prefix
 *   The prefix for YAML files in find, like 'field.storage.node'
 */
function comune_update_or_install_config($prefix) {
  $updated = [];
  $created = [];
  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $files = glob(__DIR__ . '/config/update/' . $prefix . '.*.yml');
  foreach ($files as $file) {
    $raw = file_get_contents($file);
    $value = Yaml::decode($raw);
    if (!is_array($value)) {
      throw new \RuntimeException(sprintf('Invalid YAML file %s'), $file);
    }
    // Lazy hack here since that code ignores the file extension.
    $type = $config_manager->getEntityTypeIdByName(basename($file));
    $entity_manager = $config_manager->getEntityTypeManager();
    $definition = $entity_manager->getDefinition($type);
    $id_key = $definition->getKey('id');
    $id = $value[$id_key];
    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
    $entity_storage = $entity_manager->getStorage($type);
    $entity = $entity_storage->load($id);
    if ($entity) {
      $entity = $entity_storage->updateFromStorageRecord($entity, $value);
      $entity->save();
      $updated[] = $id;
    } else {
      $entity = $entity_storage->createFromStorageRecord($value);
      $entity->save();
      $created[] = $id;
    }
  }
  return [
    'updated' => $updated,
    'created' => $created,
  ];
}

/**
 * Delete old faq view.
 */
function comune_update_8001() {
  Drupal::configFactory()->getEditable('views.view.bi_faq')->delete();
  return;
}

/**
 * Delete old argomenti view.
 */
function comune_update_8002() {
  $prefix = 'views';
  Drupal::configFactory()->getEditable('views.view.bi_argomenti')->delete();
  return comune_update_or_install_config($prefix);
}

/**
 * Update some node path aliases.
 */
function comune_update_8003() {
  $nodes = ['/node/14', '/node/15', '/node/16', '/node/17', '/node/18', '/node/19', '/node/20'];
  $database = \Drupal::database();
  $query = $database->delete('path_alias')->condition('path', $nodes, 'IN')->execute();
  $query = $database->delete('path_alias_revision')->condition('path', $nodes, 'IN')->execute();

  \Drupal::service('module_installer')->install(['navigatio'], TRUE);
  comune_run_migration('path_aliases');
  \Drupal::configFactory()->getEditable('migrate_plus.migration.path_aliases')->delete();
  \Drupal::service('module_installer')->uninstall(['navigatio']);

  return;
}

/**
 * Update paragraphs for Amministrazione taxonomies.
 */
function comune_update_8004() {
  \Drupal::service('module_installer')->install(['theca'], TRUE);
  comune_run_migration('paragraph_sub', 'update');
  comune_run_migration('paragraph_common', 'update', ['execute-dependencies']);
  \Drupal::service('module_installer')->uninstall(['theca']);
  // aggiorna nodi
  \Drupal::service('module_installer')->install(['navigatio'], TRUE);
  comune_run_migration('node_common', 'update',  ['execute-dependencies']);
  // repeat alias fixes
  $nodes = ['/node/14', '/node/15', '/node/16', '/node/17', '/node/18', '/node/19', '/node/20'];
  $database = \Drupal::database();
  $query = $database->delete('path_alias')->condition('path', $nodes, 'IN')->execute();
  $query = $database->delete('path_alias_revision')->condition('path', $nodes, 'IN')->execute();
  comune_run_migration('path_aliases', 'update');
  \Drupal::service('module_installer')->uninstall(['navigatio']);

  return;
}
